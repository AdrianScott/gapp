'use strict';

var os = require('os');
var path = require('path');
var GitHubApi = require('github');
var gitconfig = require('gitconfig');
var Promise = require('bluebird');
var gpg = require('./gpg.js');
var confPath = path.join(os.homedir(), 'blocktree', 'ghconfig.json');

module.exports.createGHToken = function (creds) {
  console.log('creating gh token');
  return new Promise(function (resolve, reject) {
    var github = module.exports.getGithub();
    github.authenticate({
      type: 'basic',
      username: creds.username,
      password: creds.password
    });
    github.authorization.create({
      // everything, since we want to manage whole lifecycle
      scopes: ['user', 'repo', 'gist', 'admin:org', 'admin:gpg_key', 'admin:public_key', 'admin:org_hook', 'notifications'],
      note: 'guld',
      note_url: 'https://guld.io'
    }, function (err, res) {
      if (err) reject(err);
      if (res && res.data && res.data.token) {
        resolve(res.data.token);
      }
    });
  });
};

module.exports.getGithub = function (cfg, token) {
  cfg = cfg || {};
  cfg.headers = cfg.headers || { 'user-agent': 'guld' };
  cfg.protocol = cfg.protocol || 'https';
  cfg.host = cfg.host || 'api.github.com';
  cfg.pathPrefix = cfg.pathPrefix || '';
  cfg.Promise = cfg.Promise || Promise;
  cfg.followRedirects = cfg.followRedirects || false;
  cfg.timeout = cfg.timeout || 5000;
  var github = new GitHubApi(cfg);
  if (token) {
    github.authenticate({
      type: 'oauth',
      token: token
    });
  }
  return github;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9naXRodWIuanMiXSwibmFtZXMiOlsib3MiLCJyZXF1aXJlIiwicGF0aCIsIkdpdEh1YkFwaSIsImdpdGNvbmZpZyIsIlByb21pc2UiLCJncGciLCJjb25mUGF0aCIsImpvaW4iLCJob21lZGlyIiwibW9kdWxlIiwiZXhwb3J0cyIsImNyZWF0ZUdIVG9rZW4iLCJjcmVkcyIsImNvbnNvbGUiLCJsb2ciLCJyZXNvbHZlIiwicmVqZWN0IiwiZ2l0aHViIiwiZ2V0R2l0aHViIiwiYXV0aGVudGljYXRlIiwidHlwZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhdXRob3JpemF0aW9uIiwiY3JlYXRlIiwic2NvcGVzIiwibm90ZSIsIm5vdGVfdXJsIiwiZXJyIiwicmVzIiwiZGF0YSIsInRva2VuIiwiY2ZnIiwiaGVhZGVycyIsInByb3RvY29sIiwiaG9zdCIsInBhdGhQcmVmaXgiLCJmb2xsb3dSZWRpcmVjdHMiLCJ0aW1lb3V0Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUMsT0FBT0QsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNRSxZQUFZRixRQUFRLFFBQVIsQ0FBbEI7QUFDQSxJQUFNRyxZQUFZSCxRQUFRLFdBQVIsQ0FBbEI7QUFDQSxJQUFNSSxVQUFVSixRQUFRLFVBQVIsQ0FBaEI7QUFDQSxJQUFNSyxNQUFNTCxRQUFRLFVBQVIsQ0FBWjtBQUNBLElBQUlNLFdBQVdMLEtBQUtNLElBQUwsQ0FBVVIsR0FBR1MsT0FBSCxFQUFWLEVBQXdCLFdBQXhCLEVBQXFDLGVBQXJDLENBQWY7O0FBRUFDLE9BQU9DLE9BQVAsQ0FBZUMsYUFBZixHQUErQixVQUFDQyxLQUFELEVBQVc7QUFDeENDLFVBQVFDLEdBQVIsQ0FBWSxtQkFBWjtBQUNBLFNBQU8sSUFBSVYsT0FBSixDQUFZLFVBQVVXLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQzVDLFFBQUlDLFNBQVNSLE9BQU9DLE9BQVAsQ0FBZVEsU0FBZixFQUFiO0FBQ0FELFdBQU9FLFlBQVAsQ0FBb0I7QUFDbEJDLFlBQU0sT0FEWTtBQUVsQkMsZ0JBQVVULE1BQU1TLFFBRkU7QUFHbEJDLGdCQUFVVixNQUFNVTtBQUhFLEtBQXBCO0FBS0FMLFdBQU9NLGFBQVAsQ0FBcUJDLE1BQXJCLENBQTRCO0FBQzFCO0FBQ0FDLGNBQVEsQ0FBQyxNQUFELEVBQVMsTUFBVCxFQUFpQixNQUFqQixFQUF5QixXQUF6QixFQUFzQyxlQUF0QyxFQUF1RCxrQkFBdkQsRUFBMkUsZ0JBQTNFLEVBQTZGLGVBQTdGLENBRmtCO0FBRzFCQyxZQUFNLE1BSG9CO0FBSTFCQyxnQkFBVTtBQUpnQixLQUE1QixFQUtHLFVBQVVDLEdBQVYsRUFBZUMsR0FBZixFQUFvQjtBQUNyQixVQUFJRCxHQUFKLEVBQVNaLE9BQU9ZLEdBQVA7QUFDVCxVQUFJQyxPQUFPQSxJQUFJQyxJQUFYLElBQW1CRCxJQUFJQyxJQUFKLENBQVNDLEtBQWhDLEVBQXVDO0FBQ3JDaEIsZ0JBQVFjLElBQUlDLElBQUosQ0FBU0MsS0FBakI7QUFDRDtBQUNGLEtBVkQ7QUFXRCxHQWxCTSxDQUFQO0FBbUJELENBckJEOztBQXVCQXRCLE9BQU9DLE9BQVAsQ0FBZVEsU0FBZixHQUEyQixVQUFDYyxHQUFELEVBQU1ELEtBQU4sRUFBZ0I7QUFDekNDLFFBQU1BLE9BQU8sRUFBYjtBQUNBQSxNQUFJQyxPQUFKLEdBQWNELElBQUlDLE9BQUosSUFBZSxFQUFDLGNBQWMsTUFBZixFQUE3QjtBQUNBRCxNQUFJRSxRQUFKLEdBQWVGLElBQUlFLFFBQUosSUFBZ0IsT0FBL0I7QUFDQUYsTUFBSUcsSUFBSixHQUFXSCxJQUFJRyxJQUFKLElBQVksZ0JBQXZCO0FBQ0FILE1BQUlJLFVBQUosR0FBaUJKLElBQUlJLFVBQUosSUFBa0IsRUFBbkM7QUFDQUosTUFBSTVCLE9BQUosR0FBYzRCLElBQUk1QixPQUFKLElBQWVBLE9BQTdCO0FBQ0E0QixNQUFJSyxlQUFKLEdBQXNCTCxJQUFJSyxlQUFKLElBQXVCLEtBQTdDO0FBQ0FMLE1BQUlNLE9BQUosR0FBY04sSUFBSU0sT0FBSixJQUFlLElBQTdCO0FBQ0EsTUFBSXJCLFNBQVMsSUFBSWYsU0FBSixDQUFjOEIsR0FBZCxDQUFiO0FBQ0EsTUFBSUQsS0FBSixFQUFXO0FBQ1RkLFdBQU9FLFlBQVAsQ0FBb0I7QUFDbEJDLFlBQU0sT0FEWTtBQUVsQlcsYUFBT0E7QUFGVyxLQUFwQjtBQUlEO0FBQ0QsU0FBT2QsTUFBUDtBQUNELENBakJEIiwiZmlsZSI6ImdpdGh1Yi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuY29uc3QgR2l0SHViQXBpID0gcmVxdWlyZSgnZ2l0aHViJylcbmNvbnN0IGdpdGNvbmZpZyA9IHJlcXVpcmUoJ2dpdGNvbmZpZycpXG5jb25zdCBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKVxuY29uc3QgZ3BnID0gcmVxdWlyZSgnLi9ncGcuanMnKVxudmFyIGNvbmZQYXRoID0gcGF0aC5qb2luKG9zLmhvbWVkaXIoKSwgJ2Jsb2NrdHJlZScsICdnaGNvbmZpZy5qc29uJylcblxubW9kdWxlLmV4cG9ydHMuY3JlYXRlR0hUb2tlbiA9IChjcmVkcykgPT4ge1xuICBjb25zb2xlLmxvZygnY3JlYXRpbmcgZ2ggdG9rZW4nKVxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBnaXRodWIgPSBtb2R1bGUuZXhwb3J0cy5nZXRHaXRodWIoKVxuICAgIGdpdGh1Yi5hdXRoZW50aWNhdGUoe1xuICAgICAgdHlwZTogJ2Jhc2ljJyxcbiAgICAgIHVzZXJuYW1lOiBjcmVkcy51c2VybmFtZSxcbiAgICAgIHBhc3N3b3JkOiBjcmVkcy5wYXNzd29yZFxuICAgIH0pXG4gICAgZ2l0aHViLmF1dGhvcml6YXRpb24uY3JlYXRlKHtcbiAgICAgIC8vIGV2ZXJ5dGhpbmcsIHNpbmNlIHdlIHdhbnQgdG8gbWFuYWdlIHdob2xlIGxpZmVjeWNsZVxuICAgICAgc2NvcGVzOiBbJ3VzZXInLCAncmVwbycsICdnaXN0JywgJ2FkbWluOm9yZycsICdhZG1pbjpncGdfa2V5JywgJ2FkbWluOnB1YmxpY19rZXknLCAnYWRtaW46b3JnX2hvb2snLCAnbm90aWZpY2F0aW9ucyddLFxuICAgICAgbm90ZTogJ2d1bGQnLFxuICAgICAgbm90ZV91cmw6ICdodHRwczovL2d1bGQuaW8nXG4gICAgfSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICBpZiAoZXJyKSByZWplY3QoZXJyKVxuICAgICAgaWYgKHJlcyAmJiByZXMuZGF0YSAmJiByZXMuZGF0YS50b2tlbikge1xuICAgICAgICByZXNvbHZlKHJlcy5kYXRhLnRva2VuKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzLmdldEdpdGh1YiA9IChjZmcsIHRva2VuKSA9PiB7XG4gIGNmZyA9IGNmZyB8fCB7fVxuICBjZmcuaGVhZGVycyA9IGNmZy5oZWFkZXJzIHx8IHsndXNlci1hZ2VudCc6ICdndWxkJ31cbiAgY2ZnLnByb3RvY29sID0gY2ZnLnByb3RvY29sIHx8ICdodHRwcydcbiAgY2ZnLmhvc3QgPSBjZmcuaG9zdCB8fCAnYXBpLmdpdGh1Yi5jb20nXG4gIGNmZy5wYXRoUHJlZml4ID0gY2ZnLnBhdGhQcmVmaXggfHwgJydcbiAgY2ZnLlByb21pc2UgPSBjZmcuUHJvbWlzZSB8fCBQcm9taXNlXG4gIGNmZy5mb2xsb3dSZWRpcmVjdHMgPSBjZmcuZm9sbG93UmVkaXJlY3RzIHx8IGZhbHNlXG4gIGNmZy50aW1lb3V0ID0gY2ZnLnRpbWVvdXQgfHwgNTAwMFxuICB2YXIgZ2l0aHViID0gbmV3IEdpdEh1YkFwaShjZmcpXG4gIGlmICh0b2tlbikge1xuICAgIGdpdGh1Yi5hdXRoZW50aWNhdGUoe1xuICAgICAgdHlwZTogJ29hdXRoJyxcbiAgICAgIHRva2VuOiB0b2tlblxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIGdpdGh1YlxufVxuIl19