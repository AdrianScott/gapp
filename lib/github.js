'use strict';

var os = require('os');
var path = require('path');
var GitHubApi = require('github');
var gitconfig = require('gitconfig');
var Promise = require('bluebird');
var gpg = require('./gpg.js');
var confPath = path.join(os.homedir(), 'blocktree', 'ghconfig.json');

module.exports.createGHToken = function (creds) {
  return new Promise(function (resolve, reject) {
    var github = module.exports.getGithub();
    github.authenticate({
      type: 'basic',
      username: creds.username,
      password: creds.password
    });
    github.authorization.create({
      // everything, since we want to manage whole lifecycle
      scopes: ['user', 'repo', 'gist', 'admin:org', 'admin:gpg_key', 'admin:public_key', 'admin:org_hook', 'notifications'],
      note: 'guld',
      note_url: 'https://guld.io'
    }, function (err, res) {
      if (err) reject(err);
      if (res && res.data && res.data.token) {
        resolve(res.data.token);
      }
    });
  });
};

module.exports.getGithub = function (cfg, token) {
  cfg = cfg || {};
  cfg.headers = cfg.headers || { 'user-agent': 'guld' };
  cfg.protocol = cfg.protocol || 'https';
  cfg.host = cfg.host || 'api.github.com';
  cfg.pathPrefix = cfg.pathPrefix || '';
  cfg.Promise = cfg.Promise || Promise;
  cfg.followRedirects = cfg.followRedirects || false;
  cfg.timeout = cfg.timeout || 100000;
  var github = new GitHubApi(cfg);
  if (token) {
    github.authenticate({
      type: 'oauth',
      token: token
    });
  }
  return github;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9naXRodWIuanMiXSwibmFtZXMiOlsib3MiLCJyZXF1aXJlIiwicGF0aCIsIkdpdEh1YkFwaSIsImdpdGNvbmZpZyIsIlByb21pc2UiLCJncGciLCJjb25mUGF0aCIsImpvaW4iLCJob21lZGlyIiwibW9kdWxlIiwiZXhwb3J0cyIsImNyZWF0ZUdIVG9rZW4iLCJjcmVkcyIsInJlc29sdmUiLCJyZWplY3QiLCJnaXRodWIiLCJnZXRHaXRodWIiLCJhdXRoZW50aWNhdGUiLCJ0eXBlIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImF1dGhvcml6YXRpb24iLCJjcmVhdGUiLCJzY29wZXMiLCJub3RlIiwibm90ZV91cmwiLCJlcnIiLCJyZXMiLCJkYXRhIiwidG9rZW4iLCJjZmciLCJoZWFkZXJzIiwicHJvdG9jb2wiLCJob3N0IiwicGF0aFByZWZpeCIsImZvbGxvd1JlZGlyZWN0cyIsInRpbWVvdXQiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxJQUFNQyxPQUFPRCxRQUFRLE1BQVIsQ0FBYjtBQUNBLElBQU1FLFlBQVlGLFFBQVEsUUFBUixDQUFsQjtBQUNBLElBQU1HLFlBQVlILFFBQVEsV0FBUixDQUFsQjtBQUNBLElBQU1JLFVBQVVKLFFBQVEsVUFBUixDQUFoQjtBQUNBLElBQU1LLE1BQU1MLFFBQVEsVUFBUixDQUFaO0FBQ0EsSUFBSU0sV0FBV0wsS0FBS00sSUFBTCxDQUFVUixHQUFHUyxPQUFILEVBQVYsRUFBd0IsV0FBeEIsRUFBcUMsZUFBckMsQ0FBZjs7QUFFQUMsT0FBT0MsT0FBUCxDQUFlQyxhQUFmLEdBQStCLFVBQUNDLEtBQUQsRUFBVztBQUN4QyxTQUFPLElBQUlSLE9BQUosQ0FBWSxVQUFVUyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUM1QyxRQUFJQyxTQUFTTixPQUFPQyxPQUFQLENBQWVNLFNBQWYsRUFBYjtBQUNBRCxXQUFPRSxZQUFQLENBQW9CO0FBQ2xCQyxZQUFNLE9BRFk7QUFFbEJDLGdCQUFVUCxNQUFNTyxRQUZFO0FBR2xCQyxnQkFBVVIsTUFBTVE7QUFIRSxLQUFwQjtBQUtBTCxXQUFPTSxhQUFQLENBQXFCQyxNQUFyQixDQUE0QjtBQUMxQjtBQUNBQyxjQUFRLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsTUFBakIsRUFBeUIsV0FBekIsRUFBc0MsZUFBdEMsRUFBdUQsa0JBQXZELEVBQTJFLGdCQUEzRSxFQUE2RixlQUE3RixDQUZrQjtBQUcxQkMsWUFBTSxNQUhvQjtBQUkxQkMsZ0JBQVU7QUFKZ0IsS0FBNUIsRUFLRyxVQUFVQyxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDckIsVUFBSUQsR0FBSixFQUFTWixPQUFPWSxHQUFQO0FBQ1QsVUFBSUMsT0FBT0EsSUFBSUMsSUFBWCxJQUFtQkQsSUFBSUMsSUFBSixDQUFTQyxLQUFoQyxFQUF1QztBQUNyQ2hCLGdCQUFRYyxJQUFJQyxJQUFKLENBQVNDLEtBQWpCO0FBQ0Q7QUFDRixLQVZEO0FBV0QsR0FsQk0sQ0FBUDtBQW1CRCxDQXBCRDs7QUFzQkFwQixPQUFPQyxPQUFQLENBQWVNLFNBQWYsR0FBMkIsVUFBQ2MsR0FBRCxFQUFNRCxLQUFOLEVBQWdCO0FBQ3pDQyxRQUFNQSxPQUFPLEVBQWI7QUFDQUEsTUFBSUMsT0FBSixHQUFjRCxJQUFJQyxPQUFKLElBQWUsRUFBQyxjQUFjLE1BQWYsRUFBN0I7QUFDQUQsTUFBSUUsUUFBSixHQUFlRixJQUFJRSxRQUFKLElBQWdCLE9BQS9CO0FBQ0FGLE1BQUlHLElBQUosR0FBV0gsSUFBSUcsSUFBSixJQUFZLGdCQUF2QjtBQUNBSCxNQUFJSSxVQUFKLEdBQWlCSixJQUFJSSxVQUFKLElBQWtCLEVBQW5DO0FBQ0FKLE1BQUkxQixPQUFKLEdBQWMwQixJQUFJMUIsT0FBSixJQUFlQSxPQUE3QjtBQUNBMEIsTUFBSUssZUFBSixHQUFzQkwsSUFBSUssZUFBSixJQUF1QixLQUE3QztBQUNBTCxNQUFJTSxPQUFKLEdBQWNOLElBQUlNLE9BQUosSUFBZSxNQUE3QjtBQUNBLE1BQUlyQixTQUFTLElBQUliLFNBQUosQ0FBYzRCLEdBQWQsQ0FBYjtBQUNBLE1BQUlELEtBQUosRUFBVztBQUNUZCxXQUFPRSxZQUFQLENBQW9CO0FBQ2xCQyxZQUFNLE9BRFk7QUFFbEJXLGFBQU9BO0FBRlcsS0FBcEI7QUFJRDtBQUNELFNBQU9kLE1BQVA7QUFDRCxDQWpCRCIsImZpbGUiOiJnaXRodWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBvcyA9IHJlcXVpcmUoJ29zJylcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IEdpdEh1YkFwaSA9IHJlcXVpcmUoJ2dpdGh1YicpXG5jb25zdCBnaXRjb25maWcgPSByZXF1aXJlKCdnaXRjb25maWcnKVxuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJylcbmNvbnN0IGdwZyA9IHJlcXVpcmUoJy4vZ3BnLmpzJylcbnZhciBjb25mUGF0aCA9IHBhdGguam9pbihvcy5ob21lZGlyKCksICdibG9ja3RyZWUnLCAnZ2hjb25maWcuanNvbicpXG5cbm1vZHVsZS5leHBvcnRzLmNyZWF0ZUdIVG9rZW4gPSAoY3JlZHMpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgZ2l0aHViID0gbW9kdWxlLmV4cG9ydHMuZ2V0R2l0aHViKClcbiAgICBnaXRodWIuYXV0aGVudGljYXRlKHtcbiAgICAgIHR5cGU6ICdiYXNpYycsXG4gICAgICB1c2VybmFtZTogY3JlZHMudXNlcm5hbWUsXG4gICAgICBwYXNzd29yZDogY3JlZHMucGFzc3dvcmRcbiAgICB9KVxuICAgIGdpdGh1Yi5hdXRob3JpemF0aW9uLmNyZWF0ZSh7XG4gICAgICAvLyBldmVyeXRoaW5nLCBzaW5jZSB3ZSB3YW50IHRvIG1hbmFnZSB3aG9sZSBsaWZlY3ljbGVcbiAgICAgIHNjb3BlczogWyd1c2VyJywgJ3JlcG8nLCAnZ2lzdCcsICdhZG1pbjpvcmcnLCAnYWRtaW46Z3BnX2tleScsICdhZG1pbjpwdWJsaWNfa2V5JywgJ2FkbWluOm9yZ19ob29rJywgJ25vdGlmaWNhdGlvbnMnXSxcbiAgICAgIG5vdGU6ICdndWxkJyxcbiAgICAgIG5vdGVfdXJsOiAnaHR0cHM6Ly9ndWxkLmlvJ1xuICAgIH0sIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgaWYgKGVycikgcmVqZWN0KGVycilcbiAgICAgIGlmIChyZXMgJiYgcmVzLmRhdGEgJiYgcmVzLmRhdGEudG9rZW4pIHtcbiAgICAgICAgcmVzb2x2ZShyZXMuZGF0YS50b2tlbilcbiAgICAgIH1cbiAgICB9KVxuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cy5nZXRHaXRodWIgPSAoY2ZnLCB0b2tlbikgPT4ge1xuICBjZmcgPSBjZmcgfHwge31cbiAgY2ZnLmhlYWRlcnMgPSBjZmcuaGVhZGVycyB8fCB7J3VzZXItYWdlbnQnOiAnZ3VsZCd9XG4gIGNmZy5wcm90b2NvbCA9IGNmZy5wcm90b2NvbCB8fCAnaHR0cHMnXG4gIGNmZy5ob3N0ID0gY2ZnLmhvc3QgfHwgJ2FwaS5naXRodWIuY29tJ1xuICBjZmcucGF0aFByZWZpeCA9IGNmZy5wYXRoUHJlZml4IHx8ICcnXG4gIGNmZy5Qcm9taXNlID0gY2ZnLlByb21pc2UgfHwgUHJvbWlzZVxuICBjZmcuZm9sbG93UmVkaXJlY3RzID0gY2ZnLmZvbGxvd1JlZGlyZWN0cyB8fCBmYWxzZVxuICBjZmcudGltZW91dCA9IGNmZy50aW1lb3V0IHx8IDEwMDAwMFxuICB2YXIgZ2l0aHViID0gbmV3IEdpdEh1YkFwaShjZmcpXG4gIGlmICh0b2tlbikge1xuICAgIGdpdGh1Yi5hdXRoZW50aWNhdGUoe1xuICAgICAgdHlwZTogJ29hdXRoJyxcbiAgICAgIHRva2VuOiB0b2tlblxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIGdpdGh1YlxufVxuIl19