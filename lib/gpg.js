'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var gpg = require('gpg');

module.exports = {};

module.exports.listSecretKeys = function (term) {
  return new _promise2.default(function (resolve, reject) {
    var keys = {};
    var args = ['--list-secret-keys', '--with-colons'];
    if (term) args.push(term);
    gpg.call('', args, function (err, data) {
      if (err) reject(err);else {
        var da = data.toString('utf-8').split('\n');
        for (var l in da) {
          if (da[l].startsWith('sec')) {
            var ka = da[l].split(':');
            keys[ka[4].slice(7)] = ka[9];
          }
        }
        resolve(keys);
      }
    });
  });
};

module.exports.getFingerprint = function (term) {
  return new _promise2.default(function (resolve, reject) {
    gpg.call('', ['--fingerprint', '--with-colons', term], function (err, data) {
      if (err) reject(err);else {
        var da = data.toString('utf-8').split('\n');
        var fa = da[2].split(':');
        resolve(fa[fa.length - 2]);
      }
    });
  });
};

module.exports.genKey = function (args) {
  if (args.hasOwnProperty('description')) args['description'] = ' ' + args['description'];else args['description'] = '';
  if (args.hasOwnProperty('passphrase')) args['passphrase'] = ' ' + args['passphrase'];else args['passphrase'] = '';
  var options = args.name + ' <' + args.email + '>';
  return new _promise2.default(function (resolve, reject) {
    var opta = ['--batch', '--quick-gen-key', options];
    gpg.call('', opta, function (err, data) {
      if (err) reject(err);else resolve();
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ncGcuanMiXSwibmFtZXMiOlsiZ3BnIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0U2VjcmV0S2V5cyIsInRlcm0iLCJyZXNvbHZlIiwicmVqZWN0Iiwia2V5cyIsImFyZ3MiLCJwdXNoIiwiY2FsbCIsImVyciIsImRhdGEiLCJkYSIsInRvU3RyaW5nIiwic3BsaXQiLCJsIiwic3RhcnRzV2l0aCIsImthIiwic2xpY2UiLCJnZXRGaW5nZXJwcmludCIsImZhIiwibGVuZ3RoIiwiZ2VuS2V5IiwiaGFzT3duUHJvcGVydHkiLCJvcHRpb25zIiwibmFtZSIsImVtYWlsIiwib3B0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFNQSxNQUFNQyxRQUFRLEtBQVIsQ0FBWjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQixFQUFqQjs7QUFFQUQsT0FBT0MsT0FBUCxDQUFlQyxjQUFmLEdBQWdDLFVBQUNDLElBQUQsRUFBVTtBQUN4QyxTQUFPLHNCQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFJQyxPQUFPLEVBQVg7QUFDQSxRQUFJQyxPQUFPLENBQUMsb0JBQUQsRUFBdUIsZUFBdkIsQ0FBWDtBQUNBLFFBQUlKLElBQUosRUFBVUksS0FBS0MsSUFBTCxDQUFVTCxJQUFWO0FBQ1ZMLFFBQUlXLElBQUosQ0FBUyxFQUFULEVBQWFGLElBQWIsRUFBbUIsVUFBQ0csR0FBRCxFQUFNQyxJQUFOLEVBQWU7QUFDaEMsVUFBSUQsR0FBSixFQUFTTCxPQUFPSyxHQUFQLEVBQVQsS0FDSztBQUNILFlBQUlFLEtBQUtELEtBQUtFLFFBQUwsQ0FBYyxPQUFkLEVBQXVCQyxLQUF2QixDQUE2QixJQUE3QixDQUFUO0FBQ0EsYUFBSyxJQUFJQyxDQUFULElBQWNILEVBQWQsRUFBa0I7QUFDaEIsY0FBSUEsR0FBR0csQ0FBSCxFQUFNQyxVQUFOLENBQWlCLEtBQWpCLENBQUosRUFBNkI7QUFDM0IsZ0JBQUlDLEtBQUtMLEdBQUdHLENBQUgsRUFBTUQsS0FBTixDQUFZLEdBQVosQ0FBVDtBQUNBUixpQkFBS1csR0FBRyxDQUFILEVBQU1DLEtBQU4sQ0FBWSxDQUFaLENBQUwsSUFBdUJELEdBQUcsQ0FBSCxDQUF2QjtBQUNEO0FBQ0Y7QUFDRGIsZ0JBQVFFLElBQVI7QUFDRDtBQUNGLEtBWkQ7QUFhRCxHQWpCTSxDQUFQO0FBa0JELENBbkJEOztBQXFCQU4sT0FBT0MsT0FBUCxDQUFla0IsY0FBZixHQUFnQyxVQUFDaEIsSUFBRCxFQUFVO0FBQ3hDLFNBQU8sc0JBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3RDUCxRQUFJVyxJQUFKLENBQVMsRUFBVCxFQUFhLENBQUMsZUFBRCxFQUFrQixlQUFsQixFQUFtQ04sSUFBbkMsQ0FBYixFQUF1RCxVQUFDTyxHQUFELEVBQU1DLElBQU4sRUFBZTtBQUNwRSxVQUFJRCxHQUFKLEVBQVNMLE9BQU9LLEdBQVAsRUFBVCxLQUNLO0FBQ0gsWUFBSUUsS0FBS0QsS0FBS0UsUUFBTCxDQUFjLE9BQWQsRUFBdUJDLEtBQXZCLENBQTZCLElBQTdCLENBQVQ7QUFDQSxZQUFJTSxLQUFLUixHQUFHLENBQUgsRUFBTUUsS0FBTixDQUFZLEdBQVosQ0FBVDtBQUNBVixnQkFBUWdCLEdBQUdBLEdBQUdDLE1BQUgsR0FBWSxDQUFmLENBQVI7QUFDRDtBQUNGLEtBUEQ7QUFRRCxHQVRNLENBQVA7QUFVRCxDQVhEOztBQWFBckIsT0FBT0MsT0FBUCxDQUFlcUIsTUFBZixHQUF3QixVQUFDZixJQUFELEVBQVU7QUFDaEMsTUFBSUEsS0FBS2dCLGNBQUwsQ0FBb0IsYUFBcEIsQ0FBSixFQUF3Q2hCLEtBQUssYUFBTCxJQUFzQixNQUFNQSxLQUFLLGFBQUwsQ0FBNUIsQ0FBeEMsS0FDS0EsS0FBSyxhQUFMLElBQXNCLEVBQXRCO0FBQ0wsTUFBSUEsS0FBS2dCLGNBQUwsQ0FBb0IsWUFBcEIsQ0FBSixFQUF1Q2hCLEtBQUssWUFBTCxJQUFxQixNQUFNQSxLQUFLLFlBQUwsQ0FBM0IsQ0FBdkMsS0FDS0EsS0FBSyxZQUFMLElBQXFCLEVBQXJCO0FBQ0wsTUFBSWlCLFVBQWFqQixLQUFLa0IsSUFBbEIsVUFBMkJsQixLQUFLbUIsS0FBaEMsTUFBSjtBQUNBLFNBQU8sc0JBQVksVUFBQ3RCLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFJc0IsT0FBTyxDQUFDLFNBQUQsRUFBWSxpQkFBWixFQUErQkgsT0FBL0IsQ0FBWDtBQUNBMUIsUUFBSVcsSUFBSixDQUFTLEVBQVQsRUFBYWtCLElBQWIsRUFBbUIsVUFBQ2pCLEdBQUQsRUFBTUMsSUFBTixFQUFlO0FBQ2hDLFVBQUlELEdBQUosRUFBU0wsT0FBT0ssR0FBUCxFQUFULEtBQ0tOO0FBQ04sS0FIRDtBQUlELEdBTk0sQ0FBUDtBQU9ELENBYkQiLCJmaWxlIjoiZ3BnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ3BnID0gcmVxdWlyZSgnZ3BnJylcblxubW9kdWxlLmV4cG9ydHMgPSB7fVxuXG5tb2R1bGUuZXhwb3J0cy5saXN0U2VjcmV0S2V5cyA9ICh0ZXJtKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdmFyIGtleXMgPSB7fVxuICAgIHZhciBhcmdzID0gWyctLWxpc3Qtc2VjcmV0LWtleXMnLCAnLS13aXRoLWNvbG9ucyddXG4gICAgaWYgKHRlcm0pIGFyZ3MucHVzaCh0ZXJtKVxuICAgIGdwZy5jYWxsKCcnLCBhcmdzLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZWplY3QoZXJyKVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBkYSA9IGRhdGEudG9TdHJpbmcoJ3V0Zi04Jykuc3BsaXQoJ1xcbicpXG4gICAgICAgIGZvciAodmFyIGwgaW4gZGEpIHtcbiAgICAgICAgICBpZiAoZGFbbF0uc3RhcnRzV2l0aCgnc2VjJykpIHtcbiAgICAgICAgICAgIHZhciBrYSA9IGRhW2xdLnNwbGl0KCc6JylcbiAgICAgICAgICAgIGtleXNba2FbNF0uc2xpY2UoNyldID0ga2FbOV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShrZXlzKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzLmdldEZpbmdlcnByaW50ID0gKHRlcm0pID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBncGcuY2FsbCgnJywgWyctLWZpbmdlcnByaW50JywgJy0td2l0aC1jb2xvbnMnLCB0ZXJtXSwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgaWYgKGVycikgcmVqZWN0KGVycilcbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgZGEgPSBkYXRhLnRvU3RyaW5nKCd1dGYtOCcpLnNwbGl0KCdcXG4nKVxuICAgICAgICB2YXIgZmEgPSBkYVsyXS5zcGxpdCgnOicpXG4gICAgICAgIHJlc29sdmUoZmFbZmEubGVuZ3RoIC0gMl0pXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMuZ2VuS2V5ID0gKGFyZ3MpID0+IHtcbiAgaWYgKGFyZ3MuaGFzT3duUHJvcGVydHkoJ2Rlc2NyaXB0aW9uJykpIGFyZ3NbJ2Rlc2NyaXB0aW9uJ10gPSAnICcgKyBhcmdzWydkZXNjcmlwdGlvbiddXG4gIGVsc2UgYXJnc1snZGVzY3JpcHRpb24nXSA9ICcnXG4gIGlmIChhcmdzLmhhc093blByb3BlcnR5KCdwYXNzcGhyYXNlJykpIGFyZ3NbJ3Bhc3NwaHJhc2UnXSA9ICcgJyArIGFyZ3NbJ3Bhc3NwaHJhc2UnXVxuICBlbHNlIGFyZ3NbJ3Bhc3NwaHJhc2UnXSA9ICcnXG4gIHZhciBvcHRpb25zID0gYCR7YXJncy5uYW1lfSA8JHthcmdzLmVtYWlsfT5gXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdmFyIG9wdGEgPSBbJy0tYmF0Y2gnLCAnLS1xdWljay1nZW4ta2V5Jywgb3B0aW9uc11cbiAgICBncGcuY2FsbCgnJywgb3B0YSwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgaWYgKGVycikgcmVqZWN0KGVycilcbiAgICAgIGVsc2UgcmVzb2x2ZSgpXG4gICAgfSlcbiAgfSlcbn1cbiJdfQ==