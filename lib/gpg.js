'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var gpg = require('gpg');

module.exports = { gpg: gpg };

module.exports.listSecretKeys = function (term) {
  return new _promise2.default(function (resolve, reject) {
    var keys = {};
    var args = ['--list-secret-keys', '--with-colons'];
    if (term) args.push(term);
    gpg.call('', args, function (err, data) {
      if (err) reject(err);else {
        var da = data.toString('utf-8').split('\n');
        for (var l in da) {
          if (da[l].startsWith('sec')) {
            var ka = da[l].split(':');
            keys[ka[4].slice(7)] = ka[9];
          }
        }
        resolve(keys);
      }
    });
  });
};

module.exports.getFingerprint = function (term) {
  return new _promise2.default(function (resolve, reject) {
    gpg.call('', ['--fingerprint', '--with-colons', term], function (err, data) {
      if (err) reject(err);else {
        var da = data.toString('utf-8').split('\n');
        var fa = da[2].split(':');
        resolve(fa[fa.length - 2]);
      }
    });
  });
};

module.exports.genKey = function (name, email) {
  var options = name + ' <' + email + '>';
  return new _promise2.default(function (resolve, reject) {
    var opta = ['--batch', '--quick-gen-key', options];
    gpg.call('', opta, function (err, data) {
      if (err) reject(err);else resolve();
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ncGcuanMiXSwibmFtZXMiOlsiZ3BnIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0U2VjcmV0S2V5cyIsInRlcm0iLCJyZXNvbHZlIiwicmVqZWN0Iiwia2V5cyIsImFyZ3MiLCJwdXNoIiwiY2FsbCIsImVyciIsImRhdGEiLCJkYSIsInRvU3RyaW5nIiwic3BsaXQiLCJsIiwic3RhcnRzV2l0aCIsImthIiwic2xpY2UiLCJnZXRGaW5nZXJwcmludCIsImZhIiwibGVuZ3RoIiwiZ2VuS2V5IiwibmFtZSIsImVtYWlsIiwib3B0aW9ucyIsIm9wdGEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBTUEsTUFBTUMsUUFBUSxLQUFSLENBQVo7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUIsRUFBQ0gsS0FBS0EsR0FBTixFQUFqQjs7QUFFQUUsT0FBT0MsT0FBUCxDQUFlQyxjQUFmLEdBQWdDLFVBQUNDLElBQUQsRUFBVTtBQUN4QyxTQUFPLHNCQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFJQyxPQUFPLEVBQVg7QUFDQSxRQUFJQyxPQUFPLENBQUMsb0JBQUQsRUFBdUIsZUFBdkIsQ0FBWDtBQUNBLFFBQUlKLElBQUosRUFBVUksS0FBS0MsSUFBTCxDQUFVTCxJQUFWO0FBQ1ZMLFFBQUlXLElBQUosQ0FBUyxFQUFULEVBQWFGLElBQWIsRUFBbUIsVUFBQ0csR0FBRCxFQUFNQyxJQUFOLEVBQWU7QUFDaEMsVUFBSUQsR0FBSixFQUFTTCxPQUFPSyxHQUFQLEVBQVQsS0FDSztBQUNILFlBQUlFLEtBQUtELEtBQUtFLFFBQUwsQ0FBYyxPQUFkLEVBQXVCQyxLQUF2QixDQUE2QixJQUE3QixDQUFUO0FBQ0EsYUFBSyxJQUFJQyxDQUFULElBQWNILEVBQWQsRUFBa0I7QUFDaEIsY0FBSUEsR0FBR0csQ0FBSCxFQUFNQyxVQUFOLENBQWlCLEtBQWpCLENBQUosRUFBNkI7QUFDM0IsZ0JBQUlDLEtBQUtMLEdBQUdHLENBQUgsRUFBTUQsS0FBTixDQUFZLEdBQVosQ0FBVDtBQUNBUixpQkFBS1csR0FBRyxDQUFILEVBQU1DLEtBQU4sQ0FBWSxDQUFaLENBQUwsSUFBdUJELEdBQUcsQ0FBSCxDQUF2QjtBQUNEO0FBQ0Y7QUFDRGIsZ0JBQVFFLElBQVI7QUFDRDtBQUNGLEtBWkQ7QUFhRCxHQWpCTSxDQUFQO0FBa0JELENBbkJEOztBQXFCQU4sT0FBT0MsT0FBUCxDQUFla0IsY0FBZixHQUFnQyxVQUFDaEIsSUFBRCxFQUFVO0FBQ3hDLFNBQU8sc0JBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3RDUCxRQUFJVyxJQUFKLENBQVMsRUFBVCxFQUFhLENBQUMsZUFBRCxFQUFrQixlQUFsQixFQUFtQ04sSUFBbkMsQ0FBYixFQUF1RCxVQUFDTyxHQUFELEVBQU1DLElBQU4sRUFBZTtBQUNwRSxVQUFJRCxHQUFKLEVBQVNMLE9BQU9LLEdBQVAsRUFBVCxLQUNLO0FBQ0gsWUFBSUUsS0FBS0QsS0FBS0UsUUFBTCxDQUFjLE9BQWQsRUFBdUJDLEtBQXZCLENBQTZCLElBQTdCLENBQVQ7QUFDQSxZQUFJTSxLQUFLUixHQUFHLENBQUgsRUFBTUUsS0FBTixDQUFZLEdBQVosQ0FBVDtBQUNBVixnQkFBUWdCLEdBQUdBLEdBQUdDLE1BQUgsR0FBWSxDQUFmLENBQVI7QUFDRDtBQUNGLEtBUEQ7QUFRRCxHQVRNLENBQVA7QUFVRCxDQVhEOztBQWFBckIsT0FBT0MsT0FBUCxDQUFlcUIsTUFBZixHQUF3QixVQUFDQyxJQUFELEVBQU9DLEtBQVAsRUFBaUI7QUFDdkMsTUFBSUMsVUFBYUYsSUFBYixVQUFzQkMsS0FBdEIsTUFBSjtBQUNBLFNBQU8sc0JBQVksVUFBQ3BCLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFJcUIsT0FBTyxDQUFDLFNBQUQsRUFBWSxpQkFBWixFQUErQkQsT0FBL0IsQ0FBWDtBQUNBM0IsUUFBSVcsSUFBSixDQUFTLEVBQVQsRUFBYWlCLElBQWIsRUFBbUIsVUFBQ2hCLEdBQUQsRUFBTUMsSUFBTixFQUFlO0FBQ2hDLFVBQUlELEdBQUosRUFBU0wsT0FBT0ssR0FBUCxFQUFULEtBQ0tOO0FBQ04sS0FIRDtBQUlELEdBTk0sQ0FBUDtBQU9ELENBVEQiLCJmaWxlIjoiZ3BnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ3BnID0gcmVxdWlyZSgnZ3BnJylcblxubW9kdWxlLmV4cG9ydHMgPSB7Z3BnOiBncGd9XG5cbm1vZHVsZS5leHBvcnRzLmxpc3RTZWNyZXRLZXlzID0gKHRlcm0pID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIga2V5cyA9IHt9XG4gICAgdmFyIGFyZ3MgPSBbJy0tbGlzdC1zZWNyZXQta2V5cycsICctLXdpdGgtY29sb25zJ11cbiAgICBpZiAodGVybSkgYXJncy5wdXNoKHRlcm0pXG4gICAgZ3BnLmNhbGwoJycsIGFyZ3MsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpXG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIGRhID0gZGF0YS50b1N0cmluZygndXRmLTgnKS5zcGxpdCgnXFxuJylcbiAgICAgICAgZm9yICh2YXIgbCBpbiBkYSkge1xuICAgICAgICAgIGlmIChkYVtsXS5zdGFydHNXaXRoKCdzZWMnKSkge1xuICAgICAgICAgICAgdmFyIGthID0gZGFbbF0uc3BsaXQoJzonKVxuICAgICAgICAgICAga2V5c1trYVs0XS5zbGljZSg3KV0gPSBrYVs5XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKGtleXMpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMuZ2V0RmluZ2VycHJpbnQgPSAodGVybSkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGdwZy5jYWxsKCcnLCBbJy0tZmluZ2VycHJpbnQnLCAnLS13aXRoLWNvbG9ucycsIHRlcm1dLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZWplY3QoZXJyKVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBkYSA9IGRhdGEudG9TdHJpbmcoJ3V0Zi04Jykuc3BsaXQoJ1xcbicpXG4gICAgICAgIHZhciBmYSA9IGRhWzJdLnNwbGl0KCc6JylcbiAgICAgICAgcmVzb2x2ZShmYVtmYS5sZW5ndGggLSAyXSlcbiAgICAgIH1cbiAgICB9KVxuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cy5nZW5LZXkgPSAobmFtZSwgZW1haWwpID0+IHtcbiAgdmFyIG9wdGlvbnMgPSBgJHtuYW1lfSA8JHtlbWFpbH0+YFxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBvcHRhID0gWyctLWJhdGNoJywgJy0tcXVpY2stZ2VuLWtleScsIG9wdGlvbnNdXG4gICAgZ3BnLmNhbGwoJycsIG9wdGEsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpXG4gICAgICBlbHNlIHJlc29sdmUoKVxuICAgIH0pXG4gIH0pXG59XG4iXX0=